args:
    REF_GENOME:
        default: "Null"
        opts: "-r | --reference"
        required: True
    THREADS:
        default: 1
        opts: "-t | --nthreads"
        required: False
    READS1:
        default: "Null"
        opts: "-s1 | --sample1"
        required: True
    READS2:
        default: "Null"
        opts: "-s2 | --sample2"
        required: True
    OUTPUT:
        default: "Null"
        opts: "-o | --output"
        required: True
    CHUNKS:
        default: 1
        opts: "-c | --nchunks"
        required: False
    PROCESS_CHUNK:
        default: 0
        opts: "-p | --process_chunk"
        required: False
    READ_GROUP_STRING:
        default: ""
        opts: "-rg | --read-group"
        required: False
    SORT:
        default: False
        opts: "--sort"
        required: False
        acceptable_values:
            - False
            - True
    INDEX:
        default: False
        opts: "--index"
        required: False
        acceptable_values:
            - False
            - True
help: |
    Description:
      Align FASTQ files to a reference genome using the Burrows-Wheeler Aligner software.

    Options:
      -r, --reference <name of reference genome FASTA file>
      -s1, --sample1 <file 1>
      -s2, --sample2 <file 2> (Optional)
      -o, --output <name of output BAM file>
      -h, --help
      -t, --nthreads <number of threads> (Optional)
      -c, --nchunks <number of chunks> (Optional)
      -p, --process_chunk <chunk to be processed> (Optional)
      -rg, --read-group <read group string> (Optional)
      --log <destination file for version log> (Optional)

    Usage:
      docker run \\
        -v <directory with reference FASTA file>:/data/ref_genome \\
        -v <directory with reference index files>:/data/ref_index \\
        -v <directory with FASTQ files>:/data/input_data \\
        -v <directory for output BAM file>:/data/output_data \\
        --user \$(id -u):\$(id -g) \\
        --rm \\
        srp33/somatic_wgs:{tag} \\
        bwa_mem_align \\
          -r <reference FASTA file> \\
          -s1 <file 1> \\
          -s2 <file 2> (Optional) \\
          -o <name of output BAM file> \\
          -t <number of threads> (Optional) \\
          -c <number of chunks> (Optional) \\
          -p <chunk to be processed (Optional) \\
          -rg <read group string> (Optional)
          --log <destination file for version log> (Optional)
  
    Notes:
      To avoid permissions issues, please ensure that the following directories have been \
      created on the host operating system before executing this command:

      <directory with reference FASTA file>
      <directory with FASTQ files>
      <directory for output BAM file>

      The --nchunks argument divides the FASTQ files into n number of chunks. The --process_chunk argument \
      specifies which chunk should be aligned. --process_chunk must be less than --nchunks and greater than or \
      equal to 0 (the default for --process_chunk is 0). --nchunks must be greater than 0, however, inputting \
      1 for --nchunks will not change anything since that is the default behavior.

      The --rg argument allows you to specify read-group information during alignment. \
      Please specify the whole read-group string, including the @RG prefix, surround in quotes. \
      You can find a helpful tutorial here: https://software.broadinstitute.org/gatk/documentation/article.php?id=6472.
volumes:
    ref_genome: Read
    ref_index: Read
    input_data: ReadWrite
    output_data: ReadWrite
command_template: |
    NEEDED_FILES=("${REF_GENOME}".amb "${REF_GENOME}".ann "${REF_GENOME}".bwt "${REF_GENOME}".pac "${REF_GENOME}".sa)
    REF_INDEX_FILES=()
    for filename in /data/ref_index/*; do
        REF_INDEX_FILES+=($(echo "${filename##*/}"))
    done

    for NEEDED_FILE in ${NEEDED_FILES[@]}; do
        { [[ " ${REF_INDEX_FILES[@]} " =~ " ${NEEDED_FILE} " ]] \
        && ln -s /data/ref_index/"${NEEDED_FILE}" /tmp/"${NEEDED_FILE}"; } || REF_INDEXED=1
    done

    if [[ ${REF_INDEXED} == 1 ]]; then
        echo "The reference genome does not contain the proper index files."
        exit 1
    fi

    COMMAND_STRING="bwa mem -t ${THREADS} "

    if [[ "$READ_GROUP_STRING" != "" ]]
    then
      COMMAND_STRING+="-R \"$READ_GROUP_STRING\" "
    fi

    COMMAND_STRING+="/tmp/\"${REF_GENOME}\" "

    if [[ ${CHUNKS} -gt 1 ]]
    then
      COMMAND_STRING+="<(zcat /data/input_data/\"${READS1}\" | awk -v chunks=${CHUNKS} -v process_chunk=${PROCESS_CHUNK} 'int((NR-1)/4)%chunks==process_chunk') "
      COMMAND_STRING+="<(zcat /data/input_data/\"${READS2}\" | awk -v chunks=${CHUNKS} -v process_chunk=${PROCESS_CHUNK} 'int((NR-1)/4)%chunks==process_chunk') "
    else
      COMMAND_STRING+="/data/input_data/\"${READS1}\" /data/input_data/\"${READS2}\" "
    fi

    OUTPUT_PATH=/data/output_data/"${OUTPUT}"

    if [[ ${CHUNKS} -gt 1 ]]; then
      INDEX=$(echo ${OUTPUT} | grep -o '\.' | grep -c '\.')
      OUT_NAME="$(echo ${OUTPUT} | cut -d '.' -f -${INDEX})"
      OUTPUT_PATH=/data/output_data/"${OUT_NAME}".${PROCESS_CHUNK}.bam
    fi

    if [[ "$SORT" == "True" ]]
    then
      COMMAND_STRING+="| samtools sort -@ ${THREADS} -o \"${OUTPUT_PATH}\" - "
    else
      COMMAND_STRING+="| samtools view -@ ${THREADS} -b > \"${OUTPUT_PATH}\" "
    fi

    if [[ "$INDEX" == "True" ]]
    then
      COMMAND_STRING+=" && sambamba index -t ${THREADS} \"${OUTPUT_PATH}\" \"${OUTPUT_PATH}\".bai"
    fi

    eval "$COMMAND_STRING"
receipt_commands: |
    get_bash_version
    get_python_version
    get_conda_version bwa
    get_conda_version samtools
    get_conda_version sambamba
