import os
import sys
from yaml import load
from yaml import Loader

yaml_file_path = sys.argv[1]
out_file_path = sys.argv[2]
help_file_path = sys.argv[3]

command = os.path.basename(yaml_file_path).replace(".yaml", "")

with open(yaml_file_path, 'r') as yaml_file:
    yaml_text = yaml_file.read()
yaml_dict = load(yaml_text, Loader=Loader)

output = "#! /bin/bash\n\n"

# Add comment header.
output += "#" * 60
output += "\n# This script was generated by {}.\n".format(sys.argv[0])
output += "# Changes should be made to yaml files.\n".format(sys.argv[0])
output += "#" * 60
output += "\n\n"

# Specify script settings and load functions.
output += "set -o errexit\n"
output += "source /starling/helper/check_functions\n\n"

# Save help file
with open(help_file_path, 'w') as help_file:
    help_file.write(yaml_dict["help"])

# Print help function
output += "function show_help {\n"
output += "  cat {}\n".format(help_file_path)
output += "}\n\n"

# Declare a variable for each argument with its default value.
for arg, meta in sorted(yaml_dict["args"].items()):
    output += "{}=\"{}\"\n".format(arg, meta["default"])

output += "\n"

# Parse value from user for each argument.
output += "ARGNUM=$#\n\n"
output += "for (( i=1; i<=ARGNUM; i++ )); do\n"
output += "  OPTARG=$((i+1))\n"
output += "  case ${!i} in\n"

for arg, meta in sorted(yaml_dict["args"].items()):
    output += "    " + meta["opts"] + " )\n"
    output += "      check_args \"${!OPTARG}\" \"${!i}\" || exit 1\n"
    output += "      " + arg + "=${!OPTARG}\n"
    output += "      i=$((i+1))\n"
    output += "      ;;\n"

# Print help and default behavior.
output += "    -h | --help )\n"
output += "      show_help\n"
output += "      exit 0\n"
output += "      ;;\n"
output += "    * )\n"
output += "      echo \"Invalid option: ${!i}\" 1>&2\n"
output += "      exit 1\n"
output += "      ;;\n"
output += "  esac\n"
output += "done\n\n"

# Check whether required arguments are present.
for arg, meta in sorted(yaml_dict["args"].items()):
    if meta["required"]:
        output += "if [[ \"${" + arg + "}\" == \"" + meta["default"] + "\" ]]\n"
        output += "then\n"
        output += "  echo \"ERROR: The " + meta["opts"] + " argument must be provided.\"\n"
        output += "  echo \n"
        output += "  show_help\n"
        output += "  exit 1\n"
        output += "fi\n\n"

# Check whether argument values are acceptable.
for arg, meta in sorted(yaml_dict["args"].items()):
    if "acceptable_values" in meta:
        output += "if [[ "
        for value in meta["acceptable_values"]:
            output += "\"${" + arg + "}\" != \"" + str(value) + "\" && "
        output = output.rstrip("&& ")
        output += " ]]\n"
        output += "then\n"
        output += "  echo \"ERROR: The " + arg + " argument must be " + " or ".join([str(x) for x in meta["acceptable_values"]]) + ".\"\n"
        output += "  show_help\n"
        output += "  exit 1\n"
        output += "fi\n\n"

# Check for the necessary directories which are only created by volumes
output += "MISSING_VOLUMES=()\n"
output += "EXIT_CODE=()\n\n"

# Check for volumes
for volume in yaml_dict["volumes"]:
    output += "[[ -d " + volume + " ]] || { MISSING_VOLUMES+=(" + volume + ") && EXIT_CODE=1; }\n"
output += "\n"

output += "if [[ ${EXIT_CODE} = 1 ]]\n"
output += "then\n"
output += "  echo \"The following volumes are missing: ${MISSING_VOLUMES[@]}\"\n"
output += "  show_help\n"
output += "  exit 1\n"
output += "fi\n\n"

# Check permissions of each directory
for volume, permissions in yaml_dict["volumes"].items():
    output += "python /starling/helper/check_permissions.py " + volume + " "
    output += permissions + " || exit 1\n"

output += "\n"

#output += "set -o xtrace\n\n"

# Add the commands for this specific task
output += yaml_dict["command_template"] + "\n\n"

# Create a receipt with version numbers, etc.
output += "echo " + ("=" * 50) + "\n"
output += "echo Receipt\n"
output += "echo " + ("=" * 50) + "\n"
output += "echo\n"
output += "echo Timestamp: $(date '+%d/%m/%Y %H:%M:%S')\n"
output += "echo\n\n"
output += yaml_dict["receipt_commands"]

print("Saving to {}.".format(out_file_path))
with open(out_file_path, 'w') as out_file:
    out_file.write(output)
